{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b440cebb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\"> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable Dark mode\r\n              </label>\r\n            </div>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      ;\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About Us\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Changed to uppercase\", \"success\");\r\n  };\r\n  const handleLowClick = () => {\r\n    // console.log(\"lower was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Changed to lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearText = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text copied\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed extra spaces\", \"success\");\r\n  };\r\n  // const handleEmailClick = () => {\r\n  //   let emailExt = text.match(\r\n  //     /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi\r\n  //   );\r\n  //   setText(emailExt);\r\n  // };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"Enter text here\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#5D5F5E\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#5D5F5E\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n          Convert to lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearText}>\r\n          Clear text\r\n        </button>\r\n        <button className=\"btn btn-primary  mx-1\" onClick={handleCopy}>\r\n          Copy text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove extra spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {/* {text.split(\" \").length} words and {text.length} character */}\r\n          {text.length === 0\r\n            ? `${text.split(\" \").length - 1}`\r\n            : text.split(\" \").length}{\" \"}\r\n          words, {text.length} Characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h3>Preview</h3>\r\n        <p>\r\n          {text.length > 0 ? text : \"Enter something in the textbox to preview\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#3A5870\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      setInterval(() => {\n        document.title = \"SimplyText is amazing\";\n      }, 2000);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      setInterval(() => {\n        document.title = \"Install now\";\n      }, 1500);\n    }\n  };\n  return (\n    <>\n      {/* <Navbar title=\"SimplyText\" aboutText=\"About SimplyText\" /> */}\n      {/* <Navbar /> */}\n      {/* <Router> */}\n      <Navbar title=\"SimplyText\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\"> */}\n        <TextForm\n          heading=\"Enter the text below to analyze\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n        {/* </Route>\n          </Switch> */}\n\n        {/* <About /> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}